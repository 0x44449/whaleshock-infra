events {}

http {
  # server {
  #   listen 80;
  #   server_name arena-dev.com;

  #   location / {
  #     proxy_pass http://host.docker.internal:5173;
  #     proxy_set_header Host $host;
  #     proxy_set_header X-Real-IP $remote_addr;
  #   }
  # }

  # server {
  #   listen 80;
  #   server_name api.arena-dev.com;

  #   location / {
  #     proxy_pass http://host.docker.internal:3001;

  #     proxy_http_version 1.1;
  #     proxy_set_header Upgrade $http_upgrade;
  #     proxy_set_header Connection "upgrade";

  #     proxy_set_header Host $host;
  #     proxy_set_header X-Real-IP $remote_addr;
  #   }
  # }

  server {
    listen 80;
    server_name arena-dev.com api.arena-dev.com;
    # certbot을 이용한 Let's Encrypt 갱신을 사용할 경우 반드시 아래 주석을 해제해야 합니다.
    # location /.well-known/acme-challenge/ {
    #     root /var/www/certbot;
    # }
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl http2;
    server_name arena-dev.com;

    ssl_certificate     /etc/letsencrypt/live/arena-dev.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/arena-dev.com/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location / {
      proxy_pass http://host.docker.internal:5173;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    # Next.js HMR 설정
    location /_next/webpack-hmr {
      proxy_pass         http://host.docker.internal:5173/_next/webpack-hmr;
      proxy_http_version 1.1;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "upgrade";
      proxy_set_header   Host $host;
    }
  }

  server {
    listen 443 ssl http2;
    server_name api.arena-dev.com;

    ssl_certificate     /etc/letsencrypt/live/arena-dev.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/arena-dev.com/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    location / {
      proxy_pass http://host.docker.internal:3001;
      proxy_set_header Host              $host;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }
  }
}